---
import Layout from '../layouts/Layout.astro';
import Navbar from '../components/Navbar.astro';
---

<Layout title="CORS Test - eUprava" description="Test CORS configuration for all services.">
  <div class="min-h-screen flex flex-col">
    <Navbar />
    <main class="flex-1 bg-main">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="text-center mb-8">
          <h1 class="text-3xl font-bold text-foreground mb-4">CORS Configuration Test</h1>
          <p class="text-muted-foreground">Test connectivity to all backend services</p>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div class="bg-astro-card p-6 rounded-xl silver-line">
            <h3 class="text-xl font-semibold text-card-foreground mb-4">Auth Service</h3>
            <p class="text-muted-foreground mb-4">Port 8080</p>
            <button id="test-auth" class="w-full bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors">
              Test Connection
            </button>
            <div id="auth-result" class="mt-4 hidden"></div>
          </div>
          
          <div class="bg-astro-card p-6 rounded-xl silver-line">
            <h3 class="text-xl font-semibold text-card-foreground mb-4">University Service</h3>
            <p class="text-muted-foreground mb-4">Port 8088</p>
            <button id="test-university" class="w-full bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors">
              Test Connection
            </button>
            <div id="university-result" class="mt-4 hidden"></div>
          </div>
          
          <div class="bg-astro-card p-6 rounded-xl silver-line">
            <h3 class="text-xl font-semibold text-card-foreground mb-4">Employment Service</h3>
            <p class="text-muted-foreground mb-4">Port 8089</p>
            <button id="test-employment" class="w-full bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90 transition-colors">
              Test Connection
            </button>
            <div id="employment-result" class="mt-4 hidden"></div>
          </div>
        </div>
        
        <div class="mt-8 text-center">
          <button id="test-all-services" class="bg-primary text-primary-foreground px-8 py-3 rounded-md hover:bg-primary/90 transition-colors">
            Test All Services
          </button>
        </div>
      </div>
    </main>
  </div>
</Layout>

<script>
  import { toastManager } from '../lib/toast';

  document.addEventListener('DOMContentLoaded', () => {
    const testService = async (serviceName: string, url: string, resultElementId: string) => {
      const resultElement = document.getElementById(resultElementId);
      if (!resultElement) return;

      try {
        const response = await fetch(url, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
          },
        });

        if (response.ok) {
          const data = await response.json();
          resultElement.innerHTML = `
            <div class="p-3 bg-green-100 border border-green-300 rounded-md">
              <p class="text-green-800 font-medium">✅ Connected Successfully</p>
              <p class="text-green-600 text-sm">Status: ${data.status || 'OK'}</p>
            </div>
          `;
          resultElement.classList.remove('hidden');
          toastManager.success(`${serviceName} Connected`, 'Service is responding correctly');
        } else {
          throw new Error(`HTTP ${response.status}`);
        }
      } catch (error: any) {
        let errorMessage = 'Connection failed';
        if (error.message === 'Failed to fetch') {
          errorMessage = 'CORS error or service not running';
        } else if (error.message.includes('HTTP')) {
          errorMessage = error.message;
        }
        
        resultElement.innerHTML = `
          <div class="p-3 bg-red-100 border border-red-300 rounded-md">
            <p class="text-red-800 font-medium">❌ Connection Failed</p>
            <p class="text-red-600 text-sm">${errorMessage}</p>
          </div>
        `;
        resultElement.classList.remove('hidden');
        toastManager.error(`${serviceName} Failed`, errorMessage);
      }
    };

    document.getElementById('test-auth')?.addEventListener('click', () => {
      testService('Auth Service', 'http://localhost:8080/health', 'auth-result');
    });

    document.getElementById('test-university')?.addEventListener('click', () => {
      testService('University Service', 'http://localhost:8088/health', 'university-result');
    });

    document.getElementById('test-employment')?.addEventListener('click', () => {
      testService('Employment Service', 'http://localhost:8089/health', 'employment-result');
    });

    document.getElementById('test-all-services')?.addEventListener('click', () => {
      toastManager.info('Testing All Services', 'Running connectivity tests...');
      
      setTimeout(() => testService('Auth Service', 'http://localhost:8080/health', 'auth-result'), 100);
      setTimeout(() => testService('University Service', 'http://localhost:8088/health', 'university-result'), 200);
      setTimeout(() => testService('Employment Service', 'http://localhost:8089/health', 'employment-result'), 300);
    });
  });
</script>
