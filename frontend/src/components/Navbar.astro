---
---

<nav class="fixed top-4 left-1/2 transform -translate-x-1/2 z-50">
  <div class="navbar-glass px-12 py-4">
    <div class="flex items-center justify-between w-full max-w-6xl">
      <a href="/" class="flex items-center space-x-2">
        <h1 class="text-xl font-bold text-primary">eUprava</h1>
      </a>
      
      <div class="hidden md:flex items-center space-x-6">
        <div id="dashboard-links" class="hidden flex items-center space-x-4">
          <a href="/university-dashboard" class="flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"/>
            </svg>
            <span>Fakultet</span>
          </a>
          
          <a href="/employment-dashboard" class="flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2-2v2m8 0V6a2 2 0 012 2v6a2 2 0 01-2 2H6a2 2 0 01-2-2V8a2 2 0 012-2V6"/>
            </svg>
            <span>Zapo≈°ljavanje</span>
          </a>
          
          <a href="/admin-dashboard" class="flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
            </svg>
            <span>Admin</span>
          </a>
        </div>
      </div>
      
      <!-- Auth Section -->
      <div class="flex items-center space-x-4">
        <a href="/login" id="login-link" class="flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"/>
          </svg>
          <span>Prijava</span>
        </a>
        
        <a href="/register" id="register-link" class="flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18 9v3m0 0v3m0-3h3m-3 0h-3m-2-5a4 4 0 11-8 0 4 4 0 018 0zM3 20a6 6 0 0112 0v1H3v-1z"/>
          </svg>
          <span>Registracija</span>
        </a>
        
        <div id="user-menu" class="hidden">
          <div class="flex items-center space-x-4">
            <div class="flex items-center space-x-2">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/>
              </svg>
              <span id="user-name" class="text-muted-foreground font-medium"></span>
            </div>
            <button id="profile-btn" class="flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"/>
              </svg>
              <span>Pregled profila</span>
            </button>
            <button id="logout-btn" class="flex items-center space-x-2 text-muted-foreground hover:text-foreground transition-colors">
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"/>
              </svg>
              <span>Odjavi se</span>
            </button>
          </div>
        </div>
      </div>
      
    </div>
  </div>
</nav>

<script>
  import { authService } from '../lib/authService';

  document.addEventListener('DOMContentLoaded', () => {
    const userMenu = document.getElementById('user-menu');
    const userName = document.getElementById('user-name');
    const logoutBtn = document.getElementById('logout-btn');
    const profileBtn = document.getElementById('profile-btn');
    const loginLink = document.getElementById('login-link');
    const registerLink = document.getElementById('register-link');
    const dashboardLinks = document.getElementById('dashboard-links');
    
    const isAuthenticated = authService.isAuthenticated();
    const currentUser = authService.getCurrentUser();
    
    if (isAuthenticated && currentUser) {
      // Hide login/register links
      if (loginLink) loginLink.style.display = 'none';
      if (registerLink) registerLink.style.display = 'none';
      
      // Show user menu
      if (userMenu) userMenu.classList.remove('hidden');
      
      // Show dashboard links
      if (dashboardLinks) dashboardLinks.classList.remove('hidden');
      
      // Set user name
      if (userName) userName.textContent = `${currentUser.first_name} ${currentUser.last_name}`;
      
      // Show/hide specific dashboard links based on user type
      const universityLink = dashboardLinks?.querySelector('a[href="/university-dashboard"]') as HTMLElement;
      const employmentLink = dashboardLinks?.querySelector('a[href="/employment-dashboard"]') as HTMLElement;
      const adminLink = dashboardLinks?.querySelector('a[href="/admin-dashboard"]') as HTMLElement;
      
      // Show relevant dashboard links based on user type
      if (['STUDENT', 'PROFESSOR'].includes(currentUser.user_type)) {
        if (universityLink) universityLink.style.display = 'flex';
      } else {
        if (universityLink) universityLink.style.display = 'none';
      }
      
      if (['EMPLOYER', 'CANDIDATE'].includes(currentUser.user_type)) {
        if (employmentLink) employmentLink.style.display = 'flex';
      } else {
        if (employmentLink) employmentLink.style.display = 'none';
      }
      
      if (currentUser.user_type === 'ADMIN') {
        if (adminLink) adminLink.style.display = 'flex';
      } else {
        if (adminLink) adminLink.style.display = 'none';
      }
    }
    
    // Profile button
    if (profileBtn) {
      profileBtn.addEventListener('click', () => {
        showProfileModal();
      });
    }
    
    // Logout button
    if (logoutBtn) {
      logoutBtn.addEventListener('click', async () => {
        try {
          await authService.logout();
          window.location.href = '/';
        } catch (error) {
          console.error('Logout error:', error);
        }
      });
    }
  });

  function showProfileModal() {
    const currentUser = authService.getCurrentUser();
    if (!currentUser) return;

    const modalHtml = `
      <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-astro-card p-6 rounded-xl silver-line max-w-md w-full mx-4">
          <h3 class="text-xl font-semibold mb-4">Pregled profila</h3>
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium mb-1">Ime</label>
              <input type="text" id="profile-first-name" value="${currentUser.first_name || ''}" class="w-full px-3 py-2 border rounded-md" readonly>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Prezime</label>
              <input type="text" id="profile-last-name" value="${currentUser.last_name || ''}" class="w-full px-3 py-2 border rounded-md" readonly>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Email</label>
              <input type="email" id="profile-email" value="${currentUser.email || ''}" class="w-full px-3 py-2 border rounded-md" readonly>
            </div>
            <div>
              <label class="block text-sm font-medium mb-1">Tip korisnika</label>
              <input type="text" id="profile-user-type" value="${currentUser.user_type || ''}" class="w-full px-3 py-2 border rounded-md" readonly>
            </div>
          </div>
          <div class="flex space-x-2 mt-6">
            <button id="edit-profile-btn" class="bg-primary text-primary-foreground px-4 py-2 rounded-md hover:bg-primary/90">
              Uredi profil
            </button>
            <button id="delete-profile-btn" class="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600">
              Obri≈°i profil
            </button>
            <button id="close-profile-btn" class="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600">
              Zatvori
            </button>
          </div>
        </div>
      </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', modalHtml);
    
    // Event listeners for profile modal
    document.getElementById('edit-profile-btn')?.addEventListener('click', () => {
      enableProfileEdit();
    });
    
    document.getElementById('delete-profile-btn')?.addEventListener('click', () => {
      if (confirm('Da li ste sigurni da ≈æelite da obri≈°ete svoj profil? Ova akcija se ne mo≈æe poni≈°titi.')) {
        deleteProfile();
      }
    });
    
    document.getElementById('close-profile-btn')?.addEventListener('click', () => {
      closeProfileModal();
    });
  }

  function enableProfileEdit() {
    const inputs = document.querySelectorAll('#profile-first-name, #profile-last-name, #profile-email');
    inputs.forEach(input => {
      (input as HTMLInputElement).readOnly = false;
    });
    
    const editBtn = document.getElementById('edit-profile-btn');
    if (editBtn) {
      editBtn.textContent = 'Saƒçuvaj promene';
      editBtn.onclick = saveProfile;
    }
  }

  async function saveProfile() {
    const currentUser = authService.getCurrentUser();
    if (!currentUser) return;

    const formData = {
      first_name: (document.getElementById('profile-first-name') as HTMLInputElement).value,
      last_name: (document.getElementById('profile-last-name') as HTMLInputElement).value,
      email: (document.getElementById('profile-email') as HTMLInputElement).value
    };

    try {
      await authService.updateUser(currentUser.id, formData);
      alert('Profil je uspe≈°no a≈æuriran!');
      closeProfileModal();
      // Refresh the page to update the navbar
      window.location.reload();
    } catch (error) {
      console.error('Error updating profile:', error);
      alert('Gre≈°ka pri a≈æuriranju profila. Poku≈°ajte ponovo.');
    }
  }

  async function deleteProfile() {
    const currentUser = authService.getCurrentUser();
    if (!currentUser) return;

    try {
      await authService.deleteUser(currentUser.id);
      alert('Profil je uspe≈°no obrisan!');
      await authService.logout();
      window.location.href = '/';
    } catch (error) {
      console.error('Error deleting profile:', error);
      alert('Gre≈°ka pri brisanju profila. Poku≈°ajte ponovo.');
    }
  }

  function closeProfileModal() {
    const modal = document.querySelector('.fixed.inset-0');
    if (modal) {
      modal.remove();
    }
  }
</script>

